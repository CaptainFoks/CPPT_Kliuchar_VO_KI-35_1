/** 
 * lab 2 package 
 */ 
package KI35.Kliuchar.lab2; 
 
import java.io.*;
import java.time.LocalDateTime; 
 
/** 
 * Class <code>TV</code> implements TV
 */ 
public class TV {
    private Screen screen;
    private Sound sound;
    private RemoteControl remoteControl;
    private boolean isOn;
    private int currentChannel;
    private FileWriter logWriter;
    private BufferedWriter logBuffer;

    /** 
     * Constructor 
     * @throws IOException 
     */ 
    public TV() throws IOException 
    { 
        this.screen = new Screen();
        this.sound = new Sound();
        this.remoteControl = new RemoteControl();
        this.isOn = false;
        this.currentChannel = 1;
        String fileName = "tv_log_" + LocalDateTime.now().toString().replace(":", "_") + ".txt";
        logWriter = new FileWriter(fileName);
        logBuffer = new BufferedWriter(logWriter);
    }
    /** 
     * Constructor 
     * @param <code>resource</code> screen sound remoteControl 
     * @throws IOException 
     */ 
    	public TV(Screen screen, Sound sound, RemoteControl remoteControl) throws IOException {
        this.screen = screen;
        this.sound = sound;
        this.remoteControl = remoteControl;
        this.isOn = false;
        this.currentChannel = 1;
        String fileName = "tv_log_" + LocalDateTime.now().toString().replace(":", "_") + ".txt";
        logWriter = new FileWriter(fileName);
        logBuffer = new BufferedWriter(logWriter);

    }
    private void log(String message) throws IOException {
        logBuffer.write(LocalDateTime.now() + ": " + message + "\n");
        logBuffer.flush();
    }
    class Screen {
    	
        private int sizeX;
        private int sizeY;
        private String type;   
        /**
        * Constructor
         * @return 
        */
        public Screen()
        {
        sizeX=3;
        sizeY=5;
        }
        /**
        * Constructor
        * @param <code>sizeX</code> The X coordinate value
        * @param <code>sizeY</code> The Y coordinate value
        */

        public Screen(int X,int Y)
        {
        sizeX= X;
        sizeY= Y;
        }
        public void setSizeX(int size) {
            this.sizeX = size;
        }
        public void setSizeY(int size) {
            this.sizeX = size;
        }
        public void setScreenType(String a)
        {
        type=a;
        }
        public int getSizeX() {
            return sizeX;
        }
        public int getSizeY() {
            return sizeY;
        }
        public String getScreenType() {
            return type;
        }
    }

    class Sound {
        private int volume;
        private String type;
        /**
         * Constructor
          * @return 
         */
         public Sound()
         {
             type= "type";
             volume= 100;
         }
         /**
         * Constructor
         * @param <code>type1</code> The type
         * @param <code>Y</code> The volume
         */

         public Sound(String type1,int Y)
         {
         type= type1;
         volume= Y;
         }
        public void setVolume(int size) {
            this.volume = size;
        }
        public void setSoundType(String a)
        {
        type=a;
        }
        public int getVolume() {
            return volume;
        }
        public String getSoundType() {
            return type;
        }
    }

    class RemoteControl {
        private boolean isROn;
        private int distance;
        private int percObstacles;
        
        /**
         * Constructor
          * @return 
         */
         public RemoteControl()
         {
        	 isROn=false;
             distance = 100;
             percObstacles = 0;
         }
         /**
         * Constructor
         * @param <code>i1</code> Off or on
         * @param <code>d</code> The distance from the signal output to the input
         * @param <code>p</code> Obstacle percentage
         */

         public RemoteControl( boolean i1, int d, int p)
         {
        	 isROn=i1;
             distance = d;
             percObstacles = p;
         }
        public void setisROn(boolean  a) {
            this.isROn = a;
        }
        public void setDistance(int a)
        {
        	distance=a;
        }
        public void setpercObstacles(int a)
        {
        	percObstacles=a;
        }
        public boolean getisROn() {
            return isROn;
        }
        public int getDistance() {
        	 return distance;  
        }
        public int getpercObstacles() {
       	 return percObstacles;  
       }
    }      
        /**
        * Method implements turning the TV on or off
        * @param <code>xPos</code> The X coordinate of the mouse position
        * @param <code>yPos</code> The Y coordinate of the mouse position
        */
    public void powerOnOff() {
        try {
	            log("Power button pressed");
	    	if(isOn==true) {
	    		isOn=false;
	    		System.out.println("TV off");
	    	}
	    	else {
	    		isOn=true;
	        System.out.println("TV on");
	    	}
        } catch (IOException e) {
            e.printStackTrace();
        }
    	}
    /**
     * Changes the current channel to the specified one.
     *
     * @param newChannel The new channel number to switch to.
     */
    public void changeChannel(int newChannel) {
        if (isOn && newChannel > 0 && newChannel <= 1000) { // Assuming max channels is 1000
            currentChannel = newChannel;
            System.out.println("Switched to channel " + newChannel);
        } else {
            if (!isOn) {
                System.out.println("TV is off. Cannot change channel.");
            } else if (newChannel <= 0) {
                System.out.println("Invalid channel number. Must be positive.");
            } else {
                System.out.println("Channel number out of range. Max channel is 1000.");
            }
        }
    }

}
